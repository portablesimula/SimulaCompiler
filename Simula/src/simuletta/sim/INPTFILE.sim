External class Common;

inbytefile Class InptFile(comn); ref(Common) comn;
%      -----------------------------------------------------------------
%      ---                                                           ---
%      ---                 P O R T A B L E     S I M U L A           ---
%      ---                                                           ---
%      ---              S I M U L E T T A    C O M P I L E R         ---
%      ---                                                           ---
%      ---                                                           ---
%      ---                  C l a s s    I n p t F i l e             ---
%      ---                                                           ---
%      -----------------------------------------------------------------
begin

 --   short integer tag_bias;
      short integer Bias;
      text TRCBUFF; short integer input_trace;

      short integer procedure ininstr;
      begin short integer instr;
            ininstr:=instr:=inbyte;
            if input_trace > 0 then begin
               outcode;
               inspect comn do TRC("Ininstr",edSymbol(instr))
            end;
      end;

      short integer procedure inbyt;
      inspect comn do begin
         short integer b;
         inbyt:=b:=inbyte;
         if input_trace > 0 then begin
            outcode; TRC("Inbyte",leftint(b)); end;
      end;

      short integer procedure in2byt;
      inspect comn do begin
         short integer b;
         in2byt:=b:=in2byte;
         if input_trace > 0 then begin
            outcode; TRC("In2byte",leftint(b)); end;
      end;

      integer procedure innumber;
      inspect comn do begin
         integer n;
         innumber:=n:=in2byte;
         if input_trace > 0 then TRC("Innumber",leftint(n));
      end;

      text procedure instring;
      begin text t;
            t:-blanks(inbyte);
            instring:-t:-intext(t);
            if input_trace > 0 then TRC("Instring","""" & t & """");
      end;

      text procedure inlongstring;
      begin text t;
            t:-blanks(in2byte);
            inlongstring:-t:-intext(t);
            if input_trace > 0 then TRC("Instring","""" & t & """");
      end;

      procedure inident;
      begin inspect comn do begin
               simsymbol:-instring; DEFIDENT;
               if input_trace>0 then TRC("Inident",simsymbol);
            end;
      end;

      procedure outcode;
      if TRCBUFF.pos > 1 then inspect sysout do begin
         outtext("Input:");
         setpos(15); outtext(TRCBUFF.strip);
         outimage; TRCBUFF:=notext; TRCBUFF.setpos(1);
      end;
   
      procedure TRC(m,v); text m,v;
      inspect comn do begin
         short integer p,l;
         inspect sysout do begin
            if input_trace > 1 then begin
               outtext("Line"); outint(curline,6);
               setpos(14); outtext(m);
               outchar(':'); setpos(25); outtext(v); outimage;
            end else begin
               p:=TRCBUFF.pos; l:=v.length;
               if p+l > TRCBUFF.length then begin outcode; p:=1 end;
               TRCBUFF.sub(p,l):=v;
               TRCBUFF.setpos(if p+l+1<14 then 14 else p+l+1);
      end end end;

      inspect comn do begin
         if not open then openerror(filename);
         TRCBUFF:-blanks(80);
--       tag_bias:=tagno;
         Bias:=ntag; --comn.ntag;
      end;
end *** InptFile ***;
