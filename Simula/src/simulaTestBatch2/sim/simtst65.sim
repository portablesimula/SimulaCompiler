
% ===============================================   Main   program =============
%  PROGRAM NAME:   Simula a.s. - SIMULA TEST NO 65
%
%  PURPOSE:     Test parameter transmission by reference to classes.
%
%  REWRITTEN BY:  BEH   07/08-86
% ==============================================================================

begin
	integer nnn=65; text title="--- Test parameter transmission by reference to classes.";
	
	boolean found_error;
	integer nFailed;
	boolean verbose=false;
	boolean noMessage;

	procedure err(t); text t;
	begin sysout.setpos(1);
	      outtext("*** error: in test "); outtext(t); outimage;
	      found_error:=true; nFailed:=nFailed+1;
	end;

   text array lines, facit(1:50);
   integer lnr;

   procedure SaveLine;
   begin
      lnr := lnr + 1;
      lines(lnr) :- copy(sysout.image.strip);
      sysout.image.setpos(1);
      sysout.image := notext
   end pros. saveline;


   procedure CheckLines(n, enr);
      integer n, enr;
   begin
      boolean OK;
      integer i;

      OK := true;

      for i := 1 step 1 until n do
      if facit(i) <> lines(i) then 
      begin
         outtext("Lines "); outint(i,0); outtext("="); outchar('"'); outtext(lines(i)); outchar('"'); outimage;
         outtext("Facit "); outint(i,0); outtext("="); outchar('"'); outtext(facit(i)); outchar('"'); outimage;
         OK := false;
      end;
      
      if not OK then
      begin
         err("Failed");
         outtext("*** error : value of attributes(");
         outint(enr, if enr < 10 then 1 else 2);
         outtext(").");
         outimage;
         outtext("            Erroneus values : ");
         outimage;
         for i := 1 step 1 until n do
         begin
            outtext("            ");
            outchar('"');
            outtext(lines(i));
            outchar('"');
            outimage;
         end;
         outimage;
      end;
   end pros. CheckLines;

   procedure ClearLines;
   begin
      integer i;

      for i := 1 step 1 until 20 do
         facit(i) :- lines(i) :- notext;

      lnr := 0;
   end  pros. ClearLines;


   class Q(ra, rb, t, ra1, rb1, b1, c1, i1, r1, t1);
      ref(A)          ra;
      ref(B)          rb;
      text              t;
      ref(A)    array ra1;
      ref(B)    array rb1;
      boolean   array  b1;
      character array  c1;
      integer   array  i1;
      real      array  r1;
      text      array  t1;
   begin
      integer         z;

      outtext("**ENTER Q");
      SaveLine;

      outtext(ra.t);
      outchar(' ');
      outtext(rb.t);
      outchar(' ');
      outtext(t);
      SaveLine;

      while  z <= 1  do
      begin
         outtext(ra1(z).t);
         outchar(' ');
         outtext(rb1(z).t);
         outchar(' ');
         outtext(t1(z));

         if  b1(z)  then outtext("true  ") else outtext("false ");
         outchar(c1(z));
         outint(i1(z), 4);
         outreal(r1(z), 5, 12);
         SaveLine;

         z := z + 1
      end;

%                                           --  Now alter parameter values;
      ra.t :- rb.t :- t :- copy("XXX");
      z := 0;

      while  z <= 1  do
      begin
         ra1(z).t := rb1(z).t := t1(z) := "XXX";
         b1(z) :=  not b1(z);
         c1(z) := 'X';
         i1(z) := -i1(z);
         r1(z) := -r1(z);
         z := z + 1
      end;

      outtext("**EXIT FROM Q");
      SaveLine;
   end of class Q;

   Q class W(ra2, rb2, b2, c2, i2, r2, t2);
      ref(A)   array ra2;
      ref(B)   array rb2;
      boolean   array b2;
      character array c2;
      integer   array i2;
      real      array r2;
      text      array t2;
   begin
      integer         x, y;

      outtext("**ENTER W");
      SaveLine;

      while  x <= 1  do
      begin
         y := 0;

         while  y <= 2  do
         begin
            outtext(ra2(x, y).t);
            outchar(' ');
            outtext(rb2(x, y).t);
            outtext(t2(x, y));

            if  b2(x, y)  then outtext("true  ") else outtext("false ");
            outint(i2(x, y), 4);
            outreal(r2(x, y), 5, 12);

            SaveLine;

            y := y + 1
         end;

         x := x + 1
      end;
%                                      --  Now alter parameter values;
      ra.t :- rb.t :- t :- copy("YYY");
      z := 0;

      while  z <= 1  do
      begin
         ra1(z).t := rb1(z).t := t1(z) := "YYY";
         b1(z) :=  not b1(z);
         c1(z) := 'Y';
         i1(z) := -i1(z);
         r1(z) := -r1(z);
         z := z + 1
      end;

      x := y := 0;

      while  x <= 1  do
      begin
         y := 0;

         while  y <= 2  do
         begin
            ra2(x, y).t := rb2(x, y).t := "ZZZZZ";
            b2(x, y) := not b2(x, y);
            c2(x, y) := 'Z';
            i2(x, y) := -i2(x, y);
            r2(x, y) := -r2(x, y);
            y := y + 1
         end;

         x := x + 1
      end;

      outtext("**EXIT FROM W");
      SaveLine
   end of class W;


   ref(A)             rav;
   ref(B)             rbv;
   ref(Q)             qr;
   ref(W)             wr;
   text               tv, txt;
   integer            i1, i2, sum;
   ref(A)    array    rav1(0:1), rav2(0:1, 0:2);
   ref(B)    array    rbv1(0:1), rbv2(0:1, 0:2);
   boolean   array    bv1(0:1),  bv2(0:1, 0:2);
   character array    cv1(0:1),  cv2(0:1, 0:2);
   integer   array    iv1(0:1),  iv2(0:1, 0:2);
   real      array    rv1(0:1),  rv2(0:1, 0:2);
   text      array    tv1(0:1),  tv2(0:1, 0:2);

   class A(t);  value t;  text t;
   begin
      outtext("  Generate Reference");
      outtext(t);
      outtext ("to class A");
      SaveLine;

      inner;

   end of class A;

   A class B;
   begin
      outtext("        -- and to class B");
      SaveLine;
   end;


	if verbose then begin
		outtext ("--- START Simula a.s. TEST"); outint(nnn,4); outimage;
		outtext (title);
		outimage; outimage;
	end;


%                                   --       First initialise vairables from without;
   rav :- new A(" rav ");
   rbv :- new B(" rbv ");
   tv :- copy(" tv ");

   while  i1 <= 1  do
   begin
      bv1(i1) := if (i1//2)*2 = i1 then true else false;
      cv1(i1) := 'K';
      iv1(i1) := i1;
      rv1(i1) := i1;
      txt :- copy("( )");
      txt.sub(2, 1).putint(i1);
      tv1(i1) :- txt;
      txt :- copy("RAV1   ");
      txt.sub(5, 3) := tv1(i1);
      rav1(i1) :- new A(txt);
      txt.sub(2, 1) := "B";
      rbv1(i1) :- new B(txt);
      i2 := 0;

      while  i2 <= 2  do
      begin
         sum := i1 + i2;
         bv2(i1, i2) := if (sum//2)*2 = sum  then true else false;
         cv2(i1, i2) := 'J';
         iv2(i1, i2) := sum;
         rv2(i1, i2) := sum;
         txt :- copy("( , )");
         txt.sub(2, 1).putint(i1);
         txt.sub(4, 1).putint(i2);
         tv2(i1, i2) :- txt;
         txt :- copy("RAV2     ");
         txt.sub(5, 5) := tv2(i1, i2);
         rav2(i1, i2) :- new A(txt);
         txt.sub(2, 1) := "B";
         rbv2(i1, i2) :- new B(txt);
         i2 := i2 + 1
      end;

      i1 := i1 + 1
   end;

   qr :- new Q(rav, rbv, tv, rav1, rbv1, bv1, cv1, iv1, rv1, tv1);

   facit(1)  :- "  Generate Reference rav to class A";
   facit(2)  :- "  Generate Reference rbv to class A";
   facit(3)  :- "        -- and to class B";
   facit(4)  :- "  Generate ReferenceRAV1(0)to class A";
   facit(5)  :- "  Generate ReferenceRBV1(0)to class A";
   facit(6)  :- "        -- and to class B";
   facit(7)  :- "  Generate ReferenceRAV2(0,0)to class A";
   facit(8)  :- "  Generate ReferenceRBV2(0,0)to class A";
   facit(9)  :- "        -- and to class B";
   facit(10) :- "  Generate ReferenceRAV2(0,1)to class A";
   facit(11) :- "  Generate ReferenceRBV2(0,1)to class A";
   facit(12) :- "        -- and to class B";
   facit(13) :- "  Generate ReferenceRAV2(0,2)to class A";
   facit(14) :- "  Generate ReferenceRBV2(0,2)to class A";
   facit(15) :- "        -- and to class B";
   facit(16) :- "  Generate ReferenceRAV1(1)to class A";
   facit(17) :- "  Generate ReferenceRBV1(1)to class A";
   facit(18) :- "        -- and to class B";
   facit(19) :- "  Generate ReferenceRAV2(1,0)to class A";
   facit(20) :- "  Generate ReferenceRBV2(1,0)to class A";
   facit(21) :- "        -- and to class B";
   facit(22) :- "  Generate ReferenceRAV2(1,1)to class A";
   facit(23) :- "  Generate ReferenceRBV2(1,1)to class A";
   facit(24) :- "        -- and to class B";
   facit(25) :- "  Generate ReferenceRAV2(1,2)to class A";
   facit(26) :- "  Generate ReferenceRBV2(1,2)to class A";
   facit(27) :- "        -- and to class B";
   facit(28) :- "**ENTER Q";
   facit(29) :- " rav   rbv   tv";
   facit(30) :- "RAV1(0) RBV1(0) (0)true  K   0  0.0000&+00";
   facit(31) :- "RAV1(1) RBV1(1) (1)false K   1  1.0000&+00";
   facit(32) :- "**EXIT FROM Q";

   CheckLines(32, 1);

   ClearLines;

   wr :- new W(rav, rbv, tv, rav1, rbv1, bv1, cv1, iv1, rv1, tv1,
                     rav2, rbv2, bv2, cv2, iv2, rv2, tv2);

   facit(1)  :- "**ENTER Q";
   facit(2)  :- "XXX XXX  tv";
   facit(3)  :- "XXX     XXX     XXXfalse X   0  0.0000&+00";
   facit(4)  :- "XXX     XXX     XXXtrue  X  -1 -1.0000&+00";
   facit(5)  :- "**EXIT FROM Q";
   facit(6)  :- "**ENTER W";
   facit(7)  :- "RAV2(0,0) RBV2(0,0)(0,0)true     0  0.0000&+00";
   facit(8)  :- "RAV2(0,1) RBV2(0,1)(0,1)false    1  1.0000&+00";
   facit(9)  :- "RAV2(0,2) RBV2(0,2)(0,2)true     2  2.0000&+00";
   facit(10) :- "RAV2(1,0) RBV2(1,0)(1,0)false    1  1.0000&+00";
   facit(11) :- "RAV2(1,1) RBV2(1,1)(1,1)true     2  2.0000&+00";
   facit(12) :- "RAV2(1,2) RBV2(1,2)(1,2)false    3  3.0000&+00";
   facit(13) :- "**EXIT FROM W";

   CheckLines(13, 2);

   ClearLines;

   rav :- new B("(Now rav points to a B-object)");

   outtext(wr.ra2(0, 0).t);
   SaveLine;
   outtext(qr.t);
   outchar(' ');
   outtext(tv);
   SaveLine;


   facit(1)  :- "  Generate Reference(Now rav points to "
                 "a B-object)to class A";
   facit(2)  :- "        -- and to class B";
   facit(3)  :- "ZZZZZ";
   facit(4)  :- "XXX  tv";

   CheckLines(4, 3);

   ClearLines;


	if noMessage then else begin
		if not found_error then begin
			outtext ("--- NO ERRORS FOUND IN TEST"); outint(nnn,4); outtext("  "); outtext(title); outimage;
		end;

		if verbose then begin
			outtext ("--- END Simula a.s. TEST"); outint(nnn,4); outimage;
		end;
	end;

end of program;
