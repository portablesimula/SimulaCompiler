
% ===============================================   Main   program =====
%  PROGRAM NAME:   Simula a.s - SIMULA TEST NO 93 (TEST PW 19)
%
%  PURPOSE:     Test Simset - linkage, head, link, into, out, follow and
%               precede.
%
%
%  REWRITTEN BY:  BEH   09/01-87
%
% ======================================================================
external class SimulaTest;

SimulaTest(93,"--- Test Simset - linkage, head, link, into, out, follow and precede.") begin

   simset begin
          link class Bead(i); integer i;;

          integer procedure Scanleft;
          begin ref(linkage) l; integer k;
                l:-chain;
                for l:-l.suc while l=/=none do
                inspect l when Bead do k:=k*10+i
                otherwise k:=k*10;
                Scanleft:=k
          end;

          integer procedure Scanright;
          begin ref(linkage) l; integer k;
                l:-chain;
                for l:-l.pred while l=/=none do
                inspect l when Bead do k:=k*10+i
                otherwise k:=k*10;
                Scanright:=k
          end;

          link class A;;
          linkage class B;;

          ref(A) Ar; ref(B) Br;
          ref(head) chain; integer j,k; ref(Bead) r,s; ref(linkage) x;

          
          chain:-new head; k:=0;
          for j:=1 step 1 until 5 do
          begin new Bead(j).into(chain); k:=k*10+((chain.pred) qua Bead).i end;

          if k=12345 then
          else begin
                err(" Attribute into or pred (1).");
                outimage;
                outtext("            Erroneus chain: ");
                outint (k,6); outimage;
                outtext("            Should had been: 12345");
                outimage;
                
          end;

          k:=Scanleft;
          if k=12345 then
          else begin
                err(" Attribute suc (2).");
                outimage;
                outtext("            Erroneus chain: ");
                outint (k,6); outimage;
                outtext("            Should had been: 12345");
                outimage;
                
          end;

          k:=Scanright;
          if k=54321 then
          else begin
                err(" Attribute pred (3).");
                outimage;
                outtext("            Erroneus reverse chain: ");
                outint (k,6); outimage;
                outtext("            Should had been:         54321");
                outimage;
                
          end;

          x:-chain;
          for x:-x.suc while x=/=none do
          begin r:-x qua Bead; k:=r.i;
                if k=(k//2)*2 then begin r.out; r.into(chain) end;
          end;

          k:=Scanleft;
          if k=13452 then
          else begin
                err(" Attributes suc, out or into (4).");
                outimage;
                outtext("            Erroneus chain: ");
                outint (k,6); outimage;
                outtext("            Should had been: 13452");
                outimage;
                
          end;

          new Bead(6).out;  comment NO EFFECT;
          k:=Scanright;
          if k=25431 then
          else begin
                err(" Attributes suc, out or into (5).");
                outimage;
                outtext("            Erroneus reverse chain: ");
                outint (k,6); outimage;
                outtext("            Should had been:         25431");
                outimage;
                
          end;


          x:-chain.prev;
          for x:-x.prev while x=/=chain do x.suc.into(chain);
          k:=Scanleft;
          if k=12543 then
          else begin
                err(" Attributes prev, suc or into (6).");
                outimage;
                outtext("            Erroneus chain: ");
                outint (k,6); outimage;
                outtext("            Should had been: 12543");
                outimage;
                
          end;

          r:-(chain.suc.suc.suc) qua Bead;
          r.follow(r);
          k:=Scanleft;
          if k= 1243 then
          else begin
                err(" Attributes suc or follow (7).");
                outimage;
                outtext("            Erroneus chain: ");
                outint (k,6); outimage;
                outtext("            Should had been:  1243"); outimage;
                
          end;

          r.follow(chain);
          (chain.prev.pred.prev) qua link.follow(chain.prev.pred);
          k:=Scanright;
          if k= 32415 then
          else begin
                err(" Attributes follow, prev or pred (8).");
                outimage;
                outtext("            Erroneus reverse chain: ");
                outint (k,6); outimage;
                outtext("            Should had been:         32415"); outimage;
                
          end;


          Ar:-new A; Br:-new B;
          r.follow(Br); Ar.follow(r);
          k:=Scanleft;
          if k= 1423 then
          else begin
                err(" Attribute follow (9).");
                outimage;
                outtext("            Erroneus chain: ");
                outint (k,6); outimage;
                outtext("            Should had been:  1423"); outimage;
                
          end;


          chain.suc.suc.follow(none);
          Ar.follow(chain.suc);
          k:=Scanleft;
          if k= 1023 then
          else begin
                err(" Attributes suc or follow (10).");
                outimage;
                outtext("            Erroneus chain: ");
                outint (k,6); outimage;
                outtext("            Should had been:  1023"); outimage;
                
          end;


          s:-new Bead(7); s.follow(r);  comment  NO EFFECT;
          k:=Scanleft;
          if k= 1023 then
          else begin
                err(" Attributes suc or follow (11).");
                outimage;
                outtext("            Erroneus chain: ");
                outint (k,6); outimage;
                outtext("            Should had been:  1023"); outimage;
                
          end;

          r.precede(chain);
          s.precede(Ar.suc);
          k:=Scanleft;
          if k= 107235 then
          else begin
                err(" Attributes suc or precede (12).");
                outimage;
                outtext("            Erroneus chain: ");
                outint (k,6); outimage;
                outtext("            Should had been: 107235"); outimage;
                
          end;


          new A.precede(s.prev.suc.suc.pred.suc);
          new A.into(chain);
          k:=Scanright;
          if k= 5320701 then
          else begin
                err(" Attributes precede, prev, suc, pred or into (13).");
                outimage;
                outtext("            Erroneus reverse chain: ");
                outint (k,8); outimage;
                outtext("            Should had been:         5320701");
                outimage;
          end;


          Ar.precede(Ar);
          (chain.prev) qua link.precede(chain.pred);
          s.precede(s);
          k:=Scanleft;
          if k= 10235 then
          else begin
                err(" Attributes precede, prev or pred (14).");
                outimage;
                outtext("            Erroneus chain: ");
                outint (k,6); outimage;
                outtext("            Should had been: 10235"); outimage;
                
          end;

          for j:=1 step 1 until 5 do chain.suc.suc.precede(chain.prev);
          k:=Scanleft;
          if k= 13025 then
          else begin
                err(" Attributes suc, precede or prev (15).");
                outimage;
                outtext("            Erroneus chain: ");
                outint (k,6); outimage;
                outtext("            Should had been:  13025"); outimage;
                
          end;

          r.precede(r);
          s:-chain.suc.suc;
          s.out;
          if r.suc==none and r.pred==none and s.suc==none and s.pred==none then
          else begin
                err(" Attributes precede, suc or pred (16).");
          end;

     end prefix block;

end;