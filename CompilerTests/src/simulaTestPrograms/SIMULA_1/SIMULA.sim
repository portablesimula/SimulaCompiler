simulation class SIMULA;
begin

%  This class should be used as prefix for Simula1-programs to ease
%  conversion to Standard SIMULA. It will redefine almost all Simula1
%  functions. Note, however, that input/output must be manually
%  rewritten - there's no way to convert that automatically.
%
%  Some few functions cannot be converted to SIMULA, these are
%
%    - HEAD(S)   Since SIMULA regards the head of a list as a special
%                object, while Simula1 regards it as a special Element
%                exact correspondence cannot be achieved. In most cases
%                HEAD(S) may probably be replaced by S, but note that
%                this may lead to qualification problems.
%
%    - SIMILAR   There's no way in SIMULA to answer the question: Are
%                two objects instances of the same class? If that class
%                is known from the context as e.g "proc", SIMILAR(X,Y)
%                can be rewritten as  "X is proc and Y is proc",
%                otherwise an explicit class code must be embedded in
%                class Frankfurt, and the equivalent statement then is
%                "X.PA.code=Y.PA.code" (preceded by none-tests).
%                    
%  The following changes must be made in the Simula1 program:
%
%    - replace all "Element X;" by "ref(Element) X;"
%
%    - replace all "Activity A;" by "Frankfurt class A;", and insert in
%      the class body an assignment of an appropriate unique value to
%      the code attribute, if necessary (see SIMILAR above):
%
%          Frankfurt class Activity ...;
%          begin ... (attribute declarations)
%                code:= <some unique identification number>;
%                ... (statements of the Activity)
%          end;
%
%    - replace all "set S;" by "ref(head) S;"
%
%  Extract-statements will have to be changed to double inspect-
%  statements, with an explicit "out" at the end of the outer inspect:
%
%                                    inspect X do begin
%     extract X               ===>      inspect PA do
%        when proc1 do <S1>                when proc1 do <S1>
%        when proc2 do <S2>                when proc2 do <S2>
%     otherwise <So>;                   otherwise <So>;
%                                       out;
%                                    end *** inspect of X ***;


link class Element(PA); ref(Frankfurt) PA;  ;

process class Frankfurt;
begin procedure terminate; goto STOP;
      integer code; !only necessary if SIMILAR is used, see above);
      inner;
STOP: end Frankfurt;

%title   ******   Element Expressions   ******

%     NONE    is represented as SIMULA none, but it should be noted that
%             it is actually an Element.

%     HEAD(S) is excluded from this class, since SETS are mapped
%             on SIMULA sets. It is not possible to define a substitute
%             without redefining SIMSET. If used, it must be replaced!!!

%     NEW A   shall be replaced by    new Element(new A).

      ref(Element) procedure PROC(X); ref(Element) X;
      PROC:- new Element(if X==none then none else X.PA);

%     CURRENT occuring in scheduling statements may be left. However,
%             any occurrence outside (i.e. as parameter to TERMINATE),
%             must be replaced by xCURRENT:

      ref(Element) procedure xCURRENT;  xCURRENT:-new Element(current);

%     SUC(X)  may, if X is different from none, be replaced by X.suc.
%             When in doubt:

      ref(Element) procedure SUC(X); ref(Element) X;
      SUC:- if X=/=none then X.suc else new Element(none);

%     PRED(X) may, if X is different from none, be replaced by X.pred.
%             When in doubt:

      ref(Element) procedure PRED(X); ref(Element) X;
      PRED:- if X=/=none then X.pred else new Element(none);

      ref(Element) procedure NEXTEV(X); ref(Element) X;
      if X=/=none then begin if X.PA=/=none then
         NEXTEV:-new Element(X.PA.nextev) end;

      ref(Element) procedure FIRST(S); ref(head) S;
      FIRST:- if S==none then new Element(none) else
              if S.empty then new Element(none) else S.first;

      ref(Element) procedure LAST(S); ref(head) S;
      LAST :- if S==none then new Element(none) else
              if S.empty then new Element(none) else S.last;

      ref(Element) procedure MEMBER(X,S); ref(Element) X; ref(head) S;
      begin ref(Element) y;
            if X==none then MEMBER:-new Element(none)
            else begin
               y:-FIRST(S);
               while y.PA=/=X.PA do 
                  if y.PA==none then goto EX else y:-SUC(y);
        EX:    MEMBER:-y;
            end;
      end;
%page
      ref(Element) procedure SUCCESSOR(n,X);
      value n; integer n; ref(Element) X;
      begin if X=/=none then begin
               while n>0 do begin n:=n-1; X:-X.pred;
                     if X==none then goto EX;
               end;
               while n<0 do begin n:=n+1; X:-X.suc;
                     if X==none then goto EX;
               end;
            end;
       EX:  SUCCESSOR:- if X==none then new Element(none) else X;
      end;

      ref(Element) procedure NUMBER(n,S);
      value n; integer n; ref(head) S;
      NUMBER:-      if n=0 or S==none then new Element(none)
               else if n<0 then SUCCESSOR(-n-1,LAST(S))
               else             SUCCESSOR(n-1,FIRST(S));

%title   ******   Boolean/Integer/Real Expressions   ******

      boolean procedure SAME(X,Y); ref(Element) X,Y;
      SAME:= if X==none or Y==none then X==Y else X.PA==Y.PA;

%     SIMILAR cannot be expressed in SIMULA.

      boolean procedure FINISHED(X); ref(Element) X;
      FINISHED:= if X==none then true else if X.PA==none then true
                 else X.PA.terminated;

      boolean procedure IDLE(X); ref(Element) X;
      IDLE:=     if X==none then true else if X.PA==none then true
                 else X.PA.idle;

      boolean procedure EXIST(X); ref(Element) X;
      if X=/=none then EXIST:= X.PA=/=none;

      boolean procedure EMPTY(S); ref(head) S;
      EMPTY:=    if S==none then true else S.empty;

      integer procedure ORDINAL(X); ref(Element) X;
      begin integer i;
            if X=/=none then begin
               if X.prev=/=none then begin
                  while X=/=none do begin i:=i+1; X:=X.pred; end;
            end end;
            ORDINAL:=i;
      end;

      integer procedure CARDINAL(S); ref(head) S;
      if S=/=none then CARDINAL:=S.cardinal;

%     TIME   may be used as is.

      long real procedure EVTIME(X); ref(Element) X;
      EVTIME:= X.PA.evtime;

      !Note: this will error terminate, when it should be "undefined"
             (whatever that means) ;

%title   ******   Set Membership Manipulation   ******

      procedure PRCD(X,Y); ref(Element) X,Y;
      if X=/=none and Y=/=none then begin
         if X.prev=/=none and Y.prev==none and Y.PA=/=none
         then Y.precede(X);
      end;

      procedure REMOVE(Y); ref(Element) Y;
      if Y=/=none then Y.out;

      procedure PRECEDE(X,Y); ref(Element) X,Y;
      if Y=/=none then begin Y.out; PRCD(X,Y) end;

      procedure FOLLOW(X,Y); ref(Element) X,Y;
      if Y=/=none then begin Y.out;
         if X=/=none then begin
            if X.prev=/=none then X.follow(Y);
      end end;

      procedure TRANSFER(X,S); ref(Element) X; ref(head) S;
      if X=/=none then begin X.out;
         if S=/=none then X.into(S);
      end;

      procedure INCLUDE(X,S); ref(Element) X; ref(head) S;
      if X=/=none and S=/=none then begin
         if X.PA=/=none then begin
            if X.prev=/=none then X:-new Element(X.PA);
            X.into(S);
      end end;

      procedure CLEAR(S); ref(head) S;
      if S=/=none then S.clear;

%title   ******   Sequencing Statements   ******

%  The (re)activation statement must be rewritten, for instance
%  in the following manner:
%
%  (re)activate ( at/delay T ( prior ) ):
%
%      inspect X do (re)activate PA ( at/delay  T  (prior) )
%
%  (re)activate X  before/after  Y:
%
%      inspect X do if Y=/=none then (re)activate PA before/after Y.PA
%
       procedure CANCEL(X); ref(Element) X;
       inspect X do this SIMULA qua simulation.cancel(PA);

%      PASSIVATE may be used as is

       procedure WAIT(S); ref(head) S;
       begin new Element(current).into(S); passivate end;

       procedure TERMINATE(X); ref(Element) X;
       inspect X do begin CANCEL(X); if PA=/=none then PA.terminate end;

%      HOLD(T) may be used unchanged.
