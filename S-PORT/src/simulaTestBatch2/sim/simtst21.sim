
% ===============================================   Main   program =============
%  PROGRAM NAME:   SIMULA A/S - SIMULA TEST NO 21
%
%  PURPOSE:     Test arrays of simple types and text.
%
%  METHOD:
%
%  NOTE:    1 - Lines in block marked with "NOTE 1" are prefixed with a %
%               because the ND-500 Simula do not manage so many dimentions.
%               Testing a Simula implementation which is supposed to handle
%               this, the %'s shall be removed.
%           2 - Lines after "NOTE 2" are marked with a %.  When testing a
%               Simula compiler which has implemented Integer Procedures
%               Lowerbound and Upperbound, these marks shall be removed.
%
%  REWRITTEN BY:  BEH   17/07-86
% ==============================================================================

begin
	integer n=21; text title="--- Test arrays of simple types and text.";
	
	boolean found_error;
	integer nFailed;
	boolean verbose=false;
	boolean noMessage;

   integer i, j;

	procedure err(t); text t;
	begin sysout.setpos(1);
	      outtext("*** error: in test "); outtext(t); outimage;
	      found_error:=true; nFailed:=nFailed+1;
	end;

	if verbose then begin
		outtext ("--- START Simula a.s. TEST"); outint(n,4); outimage;
		outtext (title);
		outimage; outimage;
	end;


   begin
%      integer lb;
%      integer ub;
      integer array A, B (i-3:j+3);
      
%      lb:=i-3;
%      ub:=j+3;
%      outtext("LB="); outint(lb,4); outimage;
%      outtext("UB="); outint(ub,4); outimage;
%      outtext("UB-LB+1="); outint(ub-lb+1,4); outimage;

      for i := 3 step -1 until -3 do
         A (-i) := B (i) := i;

      if A (-2) + B (-2) = 0 then
      else
      begin
         err(" : Integer Array (1).");
         outimage;
         outtext ("            Erroneus values : ");
         outimage;
         for i := -3 step 1 until 3 do
         begin
            outint (i, 13);
            outint (A (i), 4);
            outint (B (i), 4);
            outimage;
         end;

         ;
      end;


      for i := 0 step 3 until 18 do
      begin
         j := A (i/3-3) + B (i/3-3);

         if j = 0 then
         else
         begin
            err(" : Integer Array (2).");
            outimage;
            outtext ("            Erroneus values : ");
            outimage;
            outint (i/3-3, 13);
            outint (A (i/3-3), 4);
            outint (B (i/3-3), 4);
            outimage;

            
         end
      end
   end;

   i := 10;

%  begin                                        !**************  NOTE  1  *****;
%
%     Boolean array B (1:2, 2:3, 3:4, 4:5, 5:6, 6:7, 7:8, 8:9, 9:i, 0:1);
%     Boolean a;
%     integer i1, i2, i3, i4, i5, i6, i7, i8, i9, i0;
%
%     B (2, 3, 3, 5, 5, 7, 8, 8, 10, 1) := true;
%
%     for i1 := 1, 2 do
%     for i2 := 2, 3 do
%     for i3 := 3, 4 do
%     for i4 := 4, 5 do
%     for i5 := 5, 6 do
%     for i6 := 6, 7 do
%     for i7 := 7, 8 do
%     for i8 := 8, 9 do
%     for i9 := 9, 10 do
%     for i0 := 0, 1 do
%        a := a or B (i1, i2, i3, i4, i5, i6, i7, i8, i9, i0);
%
%     if a then
%     else
%     begin
%        err(" : Multidimetional Boolean Array (3).");
%        outimage;
%        
%     end
%  end;

   begin
      character array C (2:3, 4:5, 6:7), D (8:9, 1:2);

      integer n;

                                                !*************  NOTE 2 ********;
%      i := lowerbound (C, 2);
%      j := upperbound (D, 2);
%
%      if i = 5 and j = 2 then
%      else
%      begin
%         err(" : Function lowerbound or upperbound (4).");
%         outimage;
%         outtext ("            Erroneus values : ");
%         outint (i, 4); outint (j, 4);
%         outimage;
%         
%      end;

%      for i := 8, 9 do
%      for j := 1, 2 do
      for i := 8 step 1 until 9 do
      for j := 1 step 1 until 2 do
      begin
         D (i, j) := char (n+65);
         n := n+1
      end;

      if D (8, 1) = 'A' and D (8, 2) = 'B'
         and D (9, 1) = 'C' and D (9, 2) = 'D' then
      else
      begin
         err(" : Value of character array (5).");
         outimage;
         outtext ("            Erroneus values : ");
         outimage;
%         for i := 8, 9 do
%         for j := 1, 2 do
         for i := 8 step 1 until 9 do
         for j := 1 step 1 until 2 do
         begin
            outint (i, 13); outint (j, 3);
            outchar (D (i, j));
            outimage;
         end;
         
      end
   end;

   begin
      text array T (1:4, 1:2);

      text t1;

      t1 :- blanks (16);

%      for i := 1, 2, 3, 4 do
%      for j := 1, 2 do
      for i := 1 step 1 until 4 do
      for j := 1 step 1 until 2 do
      begin
         T (i, j) :- t1.sub (4*(i-1)+2*j-1,2);
         T (i, j).sub (1,1).putint (i);
         T (i, j).sub (2,1).putint (j)
      end;

      if t1 = "1112212231324142" then
      else
      begin
         err(" : Text array (6).");
         outtext ("            Erroneus value : ");
         outtext (t1); outimage;
       end;

      for i := 10, 20, 30, 40 do
      for j := 1, 2 do
% --      for i := 10 step 10 until 40 do
% --      for j := 1 step 1 until 2 do
      if T (i/10, j).getint = i+j then
      else
      begin
         err(" : Text array (7).");
         outtext ("            Erroneus values : ");
         outint (i, 4); outint (j, 3); outtext ("  ");
         outtext (T (4*(i/10-1)+2*j-1, 2)); outimage;
      end
   end;


	if noMessage then else begin
		if not found_error then begin
			outtext ("--- NO ERRORS FOUND IN TEST"); outint(n,4); outtext("  "); outtext(title); outimage;
		end;

		if verbose then begin
			outtext ("--- END Simula a.s. TEST"); outint(n,4); outimage;
		end;
	end;

end of program;
