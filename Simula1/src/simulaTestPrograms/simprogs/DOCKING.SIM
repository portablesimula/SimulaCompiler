% **********************************************************************
% * Simulation model for a warehouse area for reception of goods. The  *
% * goods arrive in VANs with a certain load and an unloading dock is  *
% * selected (if all busy, the van waits in a queue). Each dock has an *
% * unloading position and a place for cleaning the van afterwards.    *
% * The primary output from the model is the accumulated time spent in *
% * the pre-docking waiting queue for 2-6 docks                        *
% **********************************************************************

Drawing("Warehouse Simulation",500,300)
begin 
       
   boolean verbose=TRUE;
   text array report(minDocks:maxDocks);

   procedure trace(msg); text msg;
   begin if verbose then
   begin outtext(msg); outimage; end; end;

    
   Simulation class Warehouse(nDocks); integer nDocks;
   begin
      real washTime = 20.0, pTime = 5.0;
      long real unloadSpeed = 1000.0&&0; ! unloading speed;
      long real accWait;                 ! accumulate waiting time;
      integer Totnr;                     ! total number og Vans;
      
      ref(TextElement) array reportElement(minDocks:maxDocks);

      integer vanWidth=5,vanHeight=5;
    
      integer qLine= 10, qPos=30,        ! start of queue;
              drPos= 15,                 ! driving to a dock;
              pPos =40,                  ! dock platform;
              uPos=120,                  ! unload position;
              wPos=200;                  ! car washery;
      integer dLine1 = 75;               ! first dock;
      integer qLength;
    
      procedure FillSquare(line,pos,b,h); long real line,pos,b,h;
      begin new ShapeElement.fillRectangle(pos,line,h,b); end;
  
      procedure drawText(str,pos,line); Text str; long real pos,line;
      begin new TextElement(str,pos,line); end;
    
      Procedure drawMap(nr); integer nr; begin
         integer psl,dLine;
         setFillColor(cyan);
         FillSquare(qLine-8,qPos-8,16+vanWidth,4);
         FillSquare(qLine-8,qPos-4,4,100);
         FillSquare(qLine+4+vanWidth,qPos-4,4,100);
         for psl:= 1 step 1 until nr do begin
            dLine:= dLine1 + (psl-1)*20;
            FillSquare(dLine-8,pPos-8,16+vanWidth,4);
            FillSquare(dLine-8,pPos-4,4,240);
            FillSquare(dLine+4+vanWidth,pPos-4,4,240);
         end for;
         setDrawColor(orange);
         setFontStyleBoldItalic;
         outtext("dLine1="); outint(dLine1,0); outimage;
         outtext("pPos="); outint(pPos,0); outimage;
         outtext("uPos="); outint(uPos,0); outimage;
         outtext("wPos="); outint(wPos,0); outimage;
         drawText("Platform:",pPos,dLine1-15);
         drawText("Unload:",uPos,dLine1-15);
         drawText("Wash:",wPos,dLine1-15);
      end drawMap;
    
    

      Process class Van(load); integer load;
      begin long real waitTime; ref(Dock) myDock;
         ref(ShapeElement) vanShape;
         integer dLine,speed=200;
      
         Procedure VantoQueue; begin
            setFillColor(red);
            vanShape.fillRectangle(qPos+qLength*vanHeight*2,qLine,vanWidth,vanHeight);
            qLength:= qLength+1;
         end VantoQueue;
      
         Procedure AnvanceQueue; begin
            ref(Van) v; integer n;
            v:-Waiting.first qua Van;
            while v =/= none do begin
               v.vanShape.instantMoveTo(qPos+n*vanHeight*2,qLine);
               n:=n+1; v:-v.suc qua Van;
            end;   
         end AnvanceQueue;
      
         Procedure VantoPlatform; begin
            vanShape.setColor(black);
            vanShape.moveTo(drPos,qLine,speed);
		    AnvanceQueue;
            if qLength>0 then qLength:= qLength-1;
         
            dLine:= dLine1 + (myDock.nr-1)*20 - 5;
            vanShape.moveTo(drPos,dLine+5,speed);
         
            dLine:= dLine1 + (myDock.nr-1)*20;
            vanShape.moveTo(pPos,dLine,speed);
            trace("Van[" & objectTraceIdentifier & "] is moved to plattform ...");
         end VantoPlatform;
    
         Procedure VantoUnload; begin
            vanShape.setColor(green);
            vanShape.moveTo(uPos,dLine,speed);
            trace("Van[" & objectTraceIdentifier & "] is unloading");
         end VantoUnload;
    
         Procedure VantoWash; begin
            vanShape.moveTo(wPos,dLine,speed);
            trace("Van[" & objectTraceIdentifier & "] is washing");
         end VantoWash;
    
         Procedure VanFinished; begin
            vanShape.setColor(lightGray);
            vanShape.moveTo(wPos+500,dLine,speed);
            trace("Van[" & objectTraceIdentifier & "] is leaving");
            vanShape.out;
         end VanFinished;
      
         !**********************************;
         !*** Van Statement Code follows ***;
         !**********************************;
         trace("Van[" & objectTraceIdentifier & "] is entering the scene");
         vanShape:-new ShapeElement;
      
         if platforms.First == none then begin
            !*** all docks busy, wait in queue ***;
            waitTime:= time;
            VantoQueue;
            Wait(Waiting); out;
            accWait:= accWait+time-waitTime;     ! accumulate waiting time;
         end;
         updateReport;
         myDock:- platforms.first;               ! drive to free dock;
         VantoPlatform;
         myDock.out;                             ! this dock busy now;
         Hold(pTime);                            ! maneuver to platform;
         VantoUnload;
         waitTime:= 1000.0&&0*load/unloadSpeed;
         Hold(waitTime);                         ! unload;
         VantoWash;
         Hold(washTime);                         ! clean van;
         VanFinished;
         myDock.into(platforms);                 ! this dock free again;
         if Waiting.first =/= none then          ! signal waiting vans;
            activate Waiting.first after This Van;
         trace("Van[" & objectTraceIdentifier & "] is terminating");
      end class Van;

      Process class Generator;
      begin integer arrInterval;
         real array arrivals(1:9), AvrgLoad(4:24);
         arrivals(1):= 59; arrivals(2):= 19; arrivals(3):= 13;
         arrivals(4):=  4; arrivals(5):=  1; arrivals(6):=  1;
         arrivals(7):=  1; arrivals(8):=  1; arrivals(9):=  1;
         AvrgLoad( 4):= 9; AvrgLoad( 6):= 20; AvrgLoad( 8):=22; AvrgLoad(10):= 14;
         AvrgLoad(12):= 9; AvrgLoad(14):=  3; AvrgLoad(16):= 2; AvrgLoad(18):=  9;
         AvrgLoad(20):= 4; AvrgLoad(22):=  6; AvrgLoad(24):= 2;
         while true do begin
            arrInterval:= Histd(arrivals, U1);       ! arrivals gir fordeling;
            Hold(arrInterval*10-5);
            Totnr:= Totnr + 1;
            activate new Van(Histd(AvrgLoad,U2));    ! Medbragt mengde;
         end;
      end class Generator;

      Procedure UpdateReport; begin
         integer n;
         outtext("Simulated Time: "); outfix(time,2,8);
         outtext("   Docks: ");    outint(nDocks,3);
         outtext("   Waiting: "); outfix(accWait,2,8);
         outtext("   nVans: ");   outint(Totnr,3);
         report(nDocks):-copy(sysout.image.strip);
         if reportElement(nDocks) == none then
         begin
            setFontStyleBold;
            setDrawColor(black);
            for n:=minDocks step 1 until maxDocks do
            if report(n)=/=none then reportElement(n):-new TextElement(report(n),50,270-n*10);
         end else reportElement(nDocks).setText(report(nDocks));
         outimage;
      end UpdateReport;


      ref (Head) platforms, Waiting;
      Link class Dock(nr); integer nr;;
      integer hi;

      !****************************************;
      !*** Warehouse Statement Code follows ***;
      !****************************************;
 
      if renderingSet =/= none then renderingSet.clear;
      drawMap(nDocks);
      
      Totnr:=0;

      platforms:- new Head; Waiting:- new Head;
      for hi:= 1 step 1 until nDocks do new Dock(hi).into(platforms);

      activate new Generator;

      inner;

      UpdateReport;

      hi:=white;

   end class Warehouse;

       

   integer minDocks=2;
   integer maxDocks=6;
   integer cnt;

   integer U1, U2;
%  Good Seeds:
%        455470314       950423827      1602649445
%        660825716       913127751      1081211210
%       1566259315      1255638063       914672042

   U1:= 455470314;  U2:= 950423827;
   setSeed(U1);
   
   for cnt:= minDocks step 1 until maxDocks do
       Warehouse(cnt) begin Hold(1960.0); end;
   outtext("End of Simulation"); outimage;
    
   while true do begin end; ! Until Window close ;
      
end Animation Program;
