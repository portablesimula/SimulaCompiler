
%  ================   Main   program  ===========
%  PROGRAM NAME:  Simula a.s. - SIMULA TEST  NO 4
%
%  PURPOSE:  To test reading of integer and real numbers from source text.
%
%  METHOD:  Use the procedures with various values.
%
%  NOTES:
%   0. Some very long constants are given. When replaced, take care to
%      use exactly 72 positions (the maximum allowed by the Standard).
%   1. At lines commented with NOTE 1 : The expected precision (no of
%      digits) for real and long real must be filled in.
%   2. At lines commented with NOTE 2 : The max/min legal short integer
%      value on your implementation must be filled in as explained.
%   3. At lines commented with NOTE 3 : The max/min legal real value
%      on your implemetation must be filled in as explained.
%   4. At lines commented with NOTE 4 : The max/min legal real value
%      with double precision must be filled in as explained.
%   5. At lines commented with NOTE 5 : The expected result of the
%      putreal operation with the given precision must be edited into
%      the text string.
%
%  WRITTEN BY:  THE  12.10.83
%    CORR. BY:  PJE  3/6 86 to conformance with SIMULA Standard.
%    CORR. BY:  MYH  25/3 2018 improved reports.
%  ====================================================================
BEGIN
INTEGER            found_error;     ! Set to number of errors found. ;

TEXT               txt;             ! Text to use the editing and;
                                    ! de-editing procedures on.  ;

INTEGER            intr;             ! To be used in the procedures;
SHORT INTEGER      sho;             ! To be used in the procedures;
REAL               rea;             ! To be used in the procedures;
LONG REAL          lon;             ! To be used in the procedures;

INTEGER            realprecision;   ! To contain the precision for;
INTEGER            longprecision;   ! reals and long reals       ;
                                    ! respectively.              ;

procedure test(msg,result,expected); text msg,result,expected;
begin
IF result <> expected THEN  !*** NOTE 5 ***;
   BEGIN
   outtext ("*** error :  In "); outtext (msg);
   outimage;
   outtext (" - the following result is wrong: ");
   outchar('"'); outtext (txt); outchar('"');
   outimage;
   outtext (" -               expected result: ");
   outchar('"'); outtext (expected); outchar('"');
   outimage;
   found_error := found_error + 1
   END;
end;


outtext ("--- START Simula a.s. TEST 4");
Outimage;
outtext ("--- Test reading numbers from source text");
Outimage; Outimage;

txt :- blanks (30);

realprecision := 7;                  !********* NOTE 1 ************;
                                     ! Fill in expected precision ;
                                     ! (no of digits) for reals...;
longprecision := 16;                 !      ... and for long reals.;

txt.putint (realprecision);
test("integer operation (1).",txt,"                             7");

txt.putint (longprecision);

test("integer operation (2).",txt,"                            16");
                                      !*****************************;
                                      ! Start testing the handling  ;
                                      ! of integers.               ;
                                      !*****************************;
intr := 123456;
txt.putint (intr);
test("integer operation (3).",txt,"                        123456");

intr := maxint;
txt.putint (intr);
test("integer operation (4).",txt,"                    2147483647");

txt.putint (+0);
test("integer operation (6).",txt,"                             0");

intr := minint;
txt.putint (intr);
test("integer operation (7).",txt,"                   -2147483648");

txt.putint (-0);
test("integer operation (8).",txt,"                             0");

                                      !*****************************;
                                      ! Test handeling of short    ;
                                      ! integers.                  ;
                                      !*****************************;
txt.putint (sho);
test("short integer operation (1).",txt,"                             0");

sho := 32767;                          !************ NOTE 2 *********;
txt.putint (sho);                      ! Fill in largest positive    ;
                                       ! short integer value in these;
                                       ! two places.                 ;
test("short integer operation (2).",txt,"                         32767");

sho := +13;
txt.putint (sho);
test("short integer operation (4).",txt,"                            13");

sho := -32768;                         !********* NOTE 2 ************;
txt.putint (sho);                      ! Fill in max negative short  ;
                                       ! integer value.              ;
test("short integer operation (5).",txt,"                        -32768");


                                      !*****************************;
                                      ! Test the handeling of reals.;
                                      !*****************************;
rea := 123456;
txt.putreal (rea, realprecision);
test("real operation (1).",txt,"                  1.234560&+05");

                                       !********* NOTE 3 ************;
                                       ! Fill in max positive real   ;
                                       ! value on the form +n and    ;
                                       ! with a precision >=         ;
                                       !         "realprecision.     ;
rea :=
340282350000000000000000000000000000000.0
;
txt.putreal (rea, realprecision);
test("real operation (2).",txt,"                  3.402823&+38");

rea := - 3;
txt.putreal (rea, realprecision);
test("real operation (3).",txt,"                 -3.000000&+00");

rea := .8888888888888;
txt.putreal (rea, realprecision);
test("real operation (4).",txt,"                  8.888889&-01");

rea := +.0;
txt.putreal (rea, realprecision);
test("real operation (5).",txt,"                  0.000000&+00");

                                       !********* NOTE 3 ************;
                                       ! Fill in min negative real   ;
                                       ! value on the form -.n and   ;
                                       ! with a precision >=         ;
                                       !       "realprecision".      ;
rea := -
.0000001192093
;
txt.putreal (rea, realprecision);
test("real operation (6).",txt,"                 -1.192093&-07");

rea := 0.0;
txt.putreal (rea, realprecision);
test("real operation (7).",txt,"                  0.000000&+00");

rea := +       1234.99999999;
txt.putreal (rea, realprecision);
test("real operation (8).",txt,"                  1.235000&+03");

                                       !********* NOTE 3 ************;
                                       ! Fill in max negative real   ;
                                       ! value on the form -n.m and  ;
                                       ! with a precision >=         ;
                                       !         "realprecision".    ;
rea := -
3.402823500&+38
;
txt.putreal (rea, realprecision);
test("real operation (9).",txt,"                 -3.402823&+38");

rea := &3;
txt.putreal (rea, realprecision);
test("real operation (10).",txt,"                  1.000000&+03");

txt.putreal (&+20, realprecision);
test("real operation (11).",txt,"                  1.000000&+20");

rea := &-0;
txt.putreal (rea, realprecision);
test("real operation (12).",txt,"                  1.000000&+00");

txt.putreal (+&6, realprecision);
test("real operation (13).",txt,"                  1.000000&+06");

rea := + &+01;
txt.putreal (rea, realprecision);
test("real operation (14).",txt,"                  1.000000&+01");

txt.putreal (+&-37, realprecision);
test("real operation (15).",txt,"                  1.000000&-37");

rea := -      &2;
txt.putreal (rea, realprecision);
test("real operation (16).",txt,"                 -1.000000&+02");

rea := -&+35;
txt.putreal (rea, realprecision);
test("real operation (17).",txt,"                 -1.000000&+35");

rea := -&-2;
txt.putreal (rea, realprecision);
test("real operation (18).",txt,"                 -1.000000&-02");

                                       !********** NOTE 3 ***********;
                                       ! Fill in max positive real   ;
                                       ! value on the form n&m and   ;
                                       ! with a precision>="realprec.";
txt.putreal (340282350&30, realprecision);
test("real operation (19).",txt,"                  3.402823&+38");

rea := 123456789&+1;
txt.putreal (rea, realprecision);
test("real operation (20).",txt,"                  1.234568&+09");

rea := 3333&-8;
txt.putreal (rea, realprecision);
test("real operation (21).",txt,"                  3.333000&-05");

rea :=  +   2222222222222&-50;
txt.putreal (rea, realprecision);
test("real operation (22).",txt,"                  2.222222&-38");

rea := +55555555&-0;
txt.putreal (rea, realprecision);
test("real operation (23).",txt,"                  5.555556&+07");

rea := -9999999999&2;
txt.putreal (rea, realprecision);
test("real operation (24).",txt,"                 -1.000000&+12");

rea := -0&+0;
txt.putreal (rea, realprecision);
test("real operation (25).",txt,"                  0.000000&+00");

rea := .3333333333&7;
txt.putreal (rea, realprecision);
test("real operation (26).",txt,"                  3.333333&+06");

rea := .777777777&-10;
txt.putreal (rea, realprecision);
test("real operation (27).",txt,"                  7.777778&-11");

rea := +.00000000111111111&+4;
txt.putreal (rea, realprecision);
test("real operation (28).",txt,"                  1.111111&-05");

rea := -  .0000006666666666666666&+06;
txt.putreal (rea, realprecision);
test("real operation (29).",txt,"                 -6.666667&-01");

                                       !********* NOTE 3 ************;
                                       ! Fill in min positive real   ;
                                       ! value on the form .n&-m     ;
                                       ! where m < "max exponent" and;
                                       ! with a precision >=         ;
                                       !         "realprecision".    ;
rea :=  .119209300&-08;
txt.putreal (rea, realprecision);
test("real operation (30).",txt,"                  1.192093&-09");

rea := 0.000000&000;
txt.putreal (rea, realprecision);
test("real operation (31).",txt,"                  0.000000&+00");

rea := 123.45678&+30;
txt.putreal (rea, realprecision);
test("real operation (32).",txt,"                  1.234568&+32");

rea := +0.1111111111&+01;
txt.putreal (rea, realprecision);
test("real operation (33).",txt,"                  1.111111&+00");

rea :=  +  123456789123456789123456789123456789.123456789&-41;
txt.putreal (rea, realprecision);
test("real operation (34).",txt,"                  1.234568&-06");

                                       !********* NOTE 3 ************;
                                       ! Fill in max negative real   ;
                                       ! value on the form -n.m&e    ;
                                       ! where e="max exponent" and  ;
                                       ! with a precision >=         ;
rea := -3.40282350&38;                 !          "realprecision".   ;
txt.putreal (rea, realprecision);
test("real operation (35).",txt,"                 -3.402823&+38");

rea := - 30000000000.00&-5;
txt.putreal (rea, realprecision);
test("real operation (36).",txt,"                 -3.000000&+05");
                                       !*****************************;
                                       ! Test the handeling of long  ;
                                       ! reals.                      ;
                                       !*****************************;
lon := 12345678912345678.0&&+00;
txt.putreal (lon, longprecision);
test("long real operation (1).",txt,"        1.234567891234568&+016");

                                       !********* NOTE 4 ************;
                                       ! Fill in max positive real   ;
                                       ! value on the form +n and    ;
                                       ! with a precision >=         ;
                                       !          "longprecision".   ;
lon :=
17976931348623150000000000000000000000000000000000000000000000000&&+244
;
txt.putreal (lon, longprecision);
test("long real operation (2).",txt,"        1.797693134862315&+308");

txt.putreal (.88888888888888888&&+00, longprecision);
test("long real operation (3).",txt,"        8.888888888888888&-001");

lon := 0;
txt.putreal (lon, longprecision);
test("long real operation (4).",txt,"        0.000000000000000&+000");

                                       !********* NOTE 4 ************;
                                       ! Fill in min negative real   ;
                                       ! value on the form -.n  and  ;
                                       ! with a precision >=         ;
                                       !          "longprecision".   ;
lon := -
.2220446049250313&&-017
;
txt.putreal (lon, longprecision);
test("long real operation (5).",txt,"       -2.220446049250313&-018");

lon := +       1234.99999999111111111111111&&+00;
txt.putreal (lon, longprecision);
test("long real operation (6).",txt,"        1.234999999991111&+003");

lon := &&3;
txt.putreal (lon, longprecision);
test("long real operation (7).",txt,"        1.000000000000000&+003");

txt.putreal (+ &&00, longprecision);
test("long real operation (8).",txt,"        1.000000000000000&+000");

lon := + &&+01;
txt.putreal (lon, longprecision);
test("long real operation (9).",txt,"        1.000000000000000&+001");

                                       !********* NOTE 4 ************;
                                       ! Fill in max positive real   ;
                                       ! value on the form n&&m where;
                                       ! m < "max exponent" and with ;
                                       ! a precision >=              ;
                                       !            "longprecision". ;
txt.putreal (17976931348623150&&292, longprecision);
test("long real operation (10).",txt,"        1.797693134862315&+308");

lon := 123456789123456789&&+1;
txt.putreal (lon, longprecision);
test("long real operation (11).",txt,"        1.234567891234568&+018");

lon := -99999999999999999999&&2;
txt.putreal (lon, longprecision);
test("long real operation (12).",txt,"       -1.000000000000000&+022");

lon := .7&&-10;
txt.putreal (lon, longprecision);
test("long real operation (13).",txt,"        7.000000000000000&-011");

lon := +.00000000111111111111111111111&&+4;
txt.putreal (lon, longprecision);
test("long real operation (14).",txt,"        1.111111111111111&-005");

lon := 123.456789111111111111&&+30;
txt.putreal (lon, longprecision);
test("long real operation (15).",txt,"        1.234567891111111&+032");

                                       !********* NOTE 4 ************;
                                       ! Fill in max negative real   ;
                                       ! value on the form -n.m&&e   ;
                                       ! where e="max exponent" and  ;
                                       ! with a precision >=         ;
lon := -1.797693134862315&&+308;       ! "longprecision".;
txt.putreal (lon, longprecision);
test("long real operation (16).",txt,"       -1.797693134862315&+308");


IF found_error > 0 THEN Outint(found_error,4) ELSE Outtext ("--- NO");
Outtext (" ERRORS FOUND IN THIS TEST"); Outimage;
outtext ("--- END Simula a.s. TEST 4");
outimage

END of program;
