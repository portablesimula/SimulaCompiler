External class Common;

outbytefile Class OuptFile(comn); ref(Common) comn;
%      ----------------------------------------------------------------
%      ---                                                          ---
%      ---                 P O R T A B L E     S I M U L A          ---
%      ---                                                          ---
%      ---              S I M U L E T T A    C O M P I L E R        ---
%      ---                                                          ---
%      ---                                                          ---
%      ---                  C l a s s    O u p t F i l e            ---
%      ---                                                          ---
%      ---                                                          ---
%      --- Selection switches:                                      ---
%      ---                                                          ---
%      ---    'D' Included when dump is wanted                      ---
%      ---    'I' Included to make compiler use inserted mnemonics  ---
%      ---    'N' Included to produce ND-500 version                ---
%      ---    'P' Included to use PRIOR procedures                  ---
%      ---    'U' Included to produce UNIVAC version                ---
%      ---    'X' Included to produce XENIX version                 ---
%      ---                                                          ---
%      ----------------------------------------------------------------
begin

%SELECT ZAD


      text TRCBUFF;
      short integer output_trace;
      boolean lowercase;

      procedure outinst(i); short integer i;
      begin if output_trace > 0
            then inspect comn do begin
               TRC("Outinstr",edSymbol(i));
            end;
            outbyte(i);
      end;

      procedure outbyt(i); short integer i;
      inspect comn do begin
         if output_trace > 0 then TRC("Outbyt",leftint(i));
         outbyte(i);
      end;
      
      procedure outnumber(n); integer n;
      inspect comn do begin
         if output_trace > 0 then TRC("Outnumber",leftint(n));
         out2byte(n);
      end;

      procedure outident(i); short integer i;
      inspect comn do begin
         if output_trace > 0 then TRC("Outident", lowcase(copy(symtab(i).symbol)));
         out2byte(i);
      end;

      procedure uttag(t); short integer t; !*** output known tag ***;
      inspect comn do begin
         if t=0 then WARNING("UTTAG = ZERO???");
         if output_trace > 0 then TRC("Uttag",TagName(t));
         out2byte(t);   
      end;

      procedure outtag(i); short integer i;
      inspect comn do begin
         if i=0 then WARNING("TAG = ZERO");
         if output_trace > 0 then TRC("Outtag",TagName(i));
         out2byte(i);
      end;

      procedure outtagid(i); short integer i;
      inspect comn do begin
         text id;
         if i=0 then WARNING("Illegal output tag: ZERO");
         id:-tagtab(i).symbol;
         if id==notext then outtag(i)
         else begin
            out2byte(0); outtag(i);
            id:-copy(id); upcase(id);
            outbyte(id.length); outtext(id);
         end;
      end;

      procedure outentry(i); short integer i;
      inspect comn do begin
          if option(rank('L'))<>0 then begin
            if i=0 then WARNING("Illegal output tag: ZERO");
            inspect tagtab(i) do begin
               if symbol==notext then outtag(i)
               else begin
                  out2byte(0); outtag(i);
                  outbyte(symbol.length); outtext(symbol);
               end;
            end;
          end else outtagid(i);
      end;

      procedure outstring(t); text t;
      begin
            if output_trace > 0
            then TRC("Outstring","""" & t & """");
            outbyte(t.length); outtext(t);
      end;

      procedure outlongstring(t); text t;
      begin
            if output_trace > 0
            then TRC("Outlongstring","""" & t & """");
            out2byte(t.length); outtext(t);
      end;

      procedure outcode;
      if TRCBUFF.pos > 1 then inspect sysout do begin
         outtext("Output:");
         setpos(25); outtext(TRCBUFF.strip);
         outimage; TRCBUFF:=notext; TRCBUFF.setpos(1);
      end;

      procedure TRC(m,v); value m; text m,v;
      inspect comn do begin
         short integer p,l;
         inspect sysout do begin
            if output_trace > 1 then begin
               outtext("Line"); outint(curline,6);
               setpos(54); outtext(m);
               outchar(':'); setpos(65); outtext(v); outimage;
            end
            else begin
               p:=TRCBUFF.pos; l:=v.length;
               if p+l > TRCBUFF.length then begin outcode; p:=1 end;
               TRCBUFF.sub(p,l):=v;
               TRCBUFF.setpos(if p+l+1<14 then 14 else p+l+1);
            end;
         end;
      end;

      if not open then inspect comn do openerror(filename);
      TRCBUFF:-blanks(80);

end *** OuptFile ***;
