
%STANDARDCLASS

ByteFile class DirectByteFile_;
begin integer LOC_, MAXLOC_;  Boolean LOCKED_;
      Boolean procedure endfile;
      begin
         endfile:=OPEN_ and then LOC_>lastloc;
      end endfile; 
      integer procedure location; location := LOC_;
      integer procedure maxloc; maxloc := MAXLOC_;
      Boolean procedure locked; locked := LOCKED_;
      
      Boolean procedure open;
      if(not OPEN_) then
      begin ! see 10.1.2;
              LOC_      := 1;
%              MAXLOC_   := ...; ! fixed size, or maxint-1;
%              BYTESIZE_ := ... ! value of access mode BYTESIZE;
              open     := OPEN_ := true;
      end open;

      Boolean procedure close;
      if OPEN_ then
      begin ! see 10.1.2;
              MAXLOC_ := 0;
              OPEN_   := false;
              close  := true;
      end close;
      
      procedure locate(p); integer p;
      begin if p < 1 or p > MAXLOC_
            then error("Parameter out of range")
            else LOC_ := p;
      end locate;

      integer procedure lastloc;
      begin if not OPEN_ then error("file closed")
            else lastloc := 100000; !...;
      end lastloc;
          
      short integer procedure inbyte;
      begin if not OPEN_ then error("file closed")
            else if LOC_ <= lastloc
            then begin
%               inbyte := ... ! next byte of size BYTESIZE;...;
                LOC_    := LOC_+1
            end;   
      end inbyte;


      procedure outbyte(x); short integer x;
      begin if not OPEN_ then error("file closed")
%       else if x < 0 or else x >= 2**BYTESIZE_
%       then error("Outbyte, illegal byte value");
       else if LOC_ > MAXLOC_ then error("file overflow" )
       else begin
            ! ... output of x;
            LOC_ := LOC_ + 1
       end;   
      end outbyte;   
             
      Boolean procedure checkpoint; begin checkpoint:=false; end;
      
      integer procedure lock(timelimit,loc1,loc2);
                    real timelimit; integer loc1,loc2;
      begin lock := -1;
            if timelimit>0.0 then
            begin if LOCKED_ then unlock;
                  ! ... try to lock indicated part of file, see below;
%                  if !success; then begin LOCKED_ := true; lock := 0 end
            end
      end lock;

      Boolean procedure unlock;
      begin unlock := checkpoint;
            if LOCKED_ then begin !release file; LOCKED_ := false end
      end unlock;
     
      
      procedure intext(t); text t;
      begin
      end intext;
      
      procedure outtext(t); text t;
      begin
      end outtext;
         
end directbytefile;
