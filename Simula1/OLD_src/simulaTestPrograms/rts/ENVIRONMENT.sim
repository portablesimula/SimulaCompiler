
%STANDARDCLASS

class ENVIRONMENT_;
begin character CURRENTLOWTEN, CURRENTDECIMALMARK;

	!*** Constants ***;
    long real maxlongreal;
    long real minlongreal;
    real maxreal;
    real minreal;
    integer maxrank;
    integer maxint;
    integer minint;
    text simulaid;	

    !*** Basic Operations ***;
    integer procedure mod(i,j);   integer i,j;
    begin integer res;
       res := i - (i//j)*j;
       mod := if res = 0 then 0
         else if sign(res) <> sign(j) then res+j
         else res
    end mod;

    integer procedure rem(i,j);   integer i,j;
            rem := i - (i//j)*j;

    integer procedure abs(e); integer e;
    abs := if e >= 0 then e else -e;

    integer procedure sign(e); real e;
    sign := if      e > 0 then  1
       else if e < 0 then -1 else 0;

    integer procedure entier(r); real r;
    begin integer j;
       j := r;             ! implied conversion of "r" to integer ;
       entier:= if j > r   ! implied conversion of "j" to real ;
              then j-1 else j
    end entier;

    real procedure addepsilon(e); real e;
    addepsilon := e + 0.0; !...   see below;

    real procedure subepsilon(e); real e;
    subepsilon := e - 0.0; !...  see below;

    !*** Text Utilities ***;
	text Procedure copy(T); Text T; begin end;
	
	text procedure CONC(T1,T2);  text T1,T2;
     begin  text temp;
         CONC :- temp :- blanks(T1.length+T2.length);
         temp.sub(1,t1.length) := T1;
         temp.sub(1+T1.length,T2.length) := T2;
     end;
	
	text Procedure blanks(n); Integer n; begin end;
	character Procedure Char(n); Integer n; begin end;
	character Procedure isochar(n); Integer n; begin end;
	integer Procedure rank(c); character c; begin end;
	integer Procedure isorank(c); character c; begin end;
	boolean Procedure digit(c); character c; begin end;
	boolean Procedure letter(c); Character c; begin end;
	
	character procedure lowten(c);  character c;
%                  if ... ! c is illegal as lowten;
%                  then  error("..." ! Lowten error ;)
%                  else
                   begin
                     lowten:= CURRENTLOWTEN; CURRENTLOWTEN:= c
                   end lowten;
	
    character procedure decimalmark(c);   character c;
                  if c <> '.' and then c <> ','
                  then error("Decimalmark error")
                  else begin
                     decimalmark:= CURRENTDECIMALMARK; CURRENTDECIMALMARK:= c
                  end decimalmark;

    text procedure upcase(t);   text t;
               begin  t.setpos(1); upcase:- t;  !...; end;

    text procedure lowcase(t); text t;
               begin  t.setpos(1); lowcase:- t; !...; end;
	
	!*** Mathematical functions ***;
%	long real Procedure sqrt(x); long real x; begin end;
%	long real Procedure arctg(x,y); long real x,y; begin end;
	long real procedure sqrt(r);      long real r; begin end;
    long real procedure sin(r);       long real r; begin end;
    long real procedure cos(r);       long real r; begin end;
    long real procedure tan(r);       long real r; begin end;
    long real procedure cotan(r);     long real r; begin end;
    long real procedure arcsin(r);    long real r; begin end;
    long real procedure arccos(r);    long real r; begin end;
    long real procedure arctan(r);    long real r; begin end;
    long real procedure arctan2(y,x); long real y,x; begin end;
    long real procedure sinh(r);      long real r; begin end;
    long real procedure cosh(r);      long real r; begin end;
    long real procedure tanh(r);      long real r; begin end;
    long real procedure ln(r);        long real r; begin end;
    long real procedure log10(r);     long real r; begin end;
    long real procedure exp(r);       long real r; begin end;
	
    !*** Extremum functions ***;
    long real procedure max(i1,i2); long real i1,i2; begin end;	
    long real procedure min(i1,i2); long real i1,i2; begin end;	
	
	!*** Environmental enquiries ***;
    integer procedure sourceline; begin end;
	
	!*** Error control ***;
	Procedure error(msg); text msg; begin end;
	
	!*** Array quantities ***;
	integer procedure lowerbound(a,i); real array a; integer i;  begin end;	
    integer procedure upperbound(a,i); real array a; integer i;  begin end;	
	
	!*** ***;
	
	boolean Procedure draw(a,U); name U; real a; Integer U; begin end;
	real Procedure randint(a,b,U); name U; integer a,U; real b; begin end;
	real Procedure uniform(a,b,U); name U; real a,b; integer U; begin end;
	real Procedure normal(a,b,U); name U; real a,b; integer U; begin end;
    long real procedure negexp (a,U); name U; long real a; integer U; begin end;
    integer procedure Poisson (a,U); name U; long real a; integer U; begin end;
    long real procedure Erlang (a,b,U); name U; long real a,b; integer U; begin end;
	integer Procedure discrete(A,U); name U; long real array A; integer U; begin end;
    long real procedure linear (A,B,U); name U; long real array A,B; integer U; begin end;
	integer Procedure histd(A,U); name U; long real array A; integer U; begin end;
	
	!*** Calendar and timing utilities ***;
	text procedure datetime; datetime :- copy("...");
    long real procedure cputime; begin end;
    long real procedure clocktime; begin end;
    
    !*** Miscellaneous utilities ***;
	Procedure histo(A,B,c,d); real array A,B; real c,d; begin end;
	Procedure accum(a,b,c,d); name a,b,c; real a,b,c,d; begin end;

    CURRENTDECIMALMARK := '.';
    CURRENTLOWTEN      := '&'
end ENVIRONMENT;
