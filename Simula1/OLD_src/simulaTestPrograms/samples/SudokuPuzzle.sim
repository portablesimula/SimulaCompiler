% This code is 'brute-force' solution to Sudoku puzzle 
% Insert value into next field. If it fits advance 
% If no value is legit, retrace 
%
% This version may display flow of solution.
% To prevent seemingly endless runs, 
% number of flow tracing steps is limited to 2500
%
% Written by: Benda Sidney

begin
   integer flow; 
   character c;
 
   outtext("Do you want flow tracking (Y/N): "); breakoutimage;  
   c:=inchar;
   if c='y' or c='Y' then flow:= 1; 

   Drawing("Sudoku",540,540) begin 
     link class SQ(row, col, val); 
     integer row,col,val; 
     begin 
       integer xPos,yPos,next_val; 
       boolean Given; 
       text txVal; 
 
       boolean procedure legit(val); 
       integer val; 
       begin 
         integer i,j,reg_row,reg_col; 
         legit:= false; 
         for j:=1 step 1 until col-1, col+1 step 1 until 9 do 
            if SQinst(row,j).val = val then goto exit; 
         for i:=1 step 1 until row-1, row+1 step 1 until 9 do 
            if SQinst(i,col).val = val then goto exit; 
         ! 3x3 regions ; 
         reg_row:= row - mod(row-1,3); 
         reg_col:= col - mod(col-1,3); 
         for i:= reg_row step 1 until reg_row+2 do 
         for j:= reg_col step 1 until reg_col+2 do 
         if i ne row and j ne col and SQinst(i,j).val = val then goto exit; 
         legit:= true; 
         exit: 
       end; 
 
       ! Update status: green when legit, blue on retrace ; 
       procedure button_update(color); 
       value color; 
       integer color; 
       begin 
         setFillColor(color); 
         fillRectangle(xPos+1,yPos+1,58,58); 
         txVal.putint(val); 
         drawText(txVal, xPos+22, yPos+36); 
       end; 
 
       ! Up to detach,this is 'constructor'; 
       Given:= val > 0; 
       xPos:= (col-1)*60; 
       yPos:= (row-1)*60; 
       txVal:- blanks(1); 
       drawRectangle(xPos,yPos,60,60); 
       button_update(if Given then red else white); 
       if not Given then this SQ.into(SQchain); 
       detach; 
       ! Solving loop ; 
       while true do begin 
         for next_val:= 1 step 1 until 9 do 
           if legit(next_val) then begin 
              val:= next_val; 
              if flow = 1 then button_update(green); 
              nSteps:= nSteps+1; 
              resume(suc); 
           end; 
         val:= 0;  ! retracing ; 
         if flow = 1 then button_update(blue); 
         nSteps:= nSteps+1; 
         if flow eq 1 and nSteps > maxSteps then begin 
            flow:= 0; 
            Outtext("Flow tracking stopped after"); Outint(maxSteps,6); 
            Outtext(" steps"); Outimage; 
         end; 
         resume(prev); 
       end; 
 
     end; 
 
     link class SQexit; 
     begin 
        detach; 
        print_output; 
     end; 
 
     procedure get_input; 
     begin 
       integer i,j; 
       SQchain:- new head; 
       inspect new infile("data/SudokuPuzzle.sdk") do begin 
          Open(blanks(80)); 
!         Outtext(this infile.filename); outimage; 
          for i:=1 step 1 until 9 do 
          for j:=1 step 1 until 9 do 
             SQInst(i,j):- new SQ(i,j,inint); 
          Close; 
       end; 
       new SQexit.into(SQchain); 
     end; 
 
     boolean procedure given_is_good; 
     begin 
       integer i,j,check_val; 
       given_is_good:= true; 
       for i:= 1 step 1 until 9 do 
       for j:= 1 step 1 until 9 do 
       inspect SQinst(i,j) do 
       if Given and not legit(val) then begin 
          button_update(yellow); 
          given_is_good:= false; 
          Outtext("Invalid sudoku"); Outimage; 
       end; 
     end; 
 
     procedure print_output; 
     begin 
       integer i,j; 
       for i:=1 step 1 until 9 do 
       for j:=1 step 1 until 9 do 
         if not SQinst(i,j).Given then 
            SQinst(i,j).button_update(green); 
       Outtext("Puzzle solved in"); Outint(nSteps,8); Outtext(" steps");  
       Outimage; 
     end; 
 
     ref(head) SQchain; 
     ref(SQ) array SQinst(1:9,1:9); 
     integer nSteps, maxSteps; 
 
     setStroke(2); 
     setDrawColor(black); 
     setFontSize(26); 
     get_input; 
     nSteps:= 0; maxSteps:= 2500; 
     if given_is_good then resume(SQchain.first); 
   end; 
end;
